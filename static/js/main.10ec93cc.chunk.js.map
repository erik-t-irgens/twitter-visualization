{"version":3,"sources":["SharedComponents/NotFound.js","views/DataGraph/components/ForceNodeUpdate.js","SharedComponents/Chart.js","SharedComponents/ErrorBlock.js","SharedComponents/SingleStat.js","SharedComponents/List.js","SharedComponents/Definition.js","utilities/buildDashboardComponents.js","SharedComponents/ComponentWrapper.js","views/DataGraph/components/ComponentGallery/components/GallerySlide.js","views/DataGraph/components/ComponentGallery/components/GalleryButton.js","views/DataGraph/components/ComponentGallery/index.js","SharedComponents/deleteModal.js","actions/index.js","actions/types.js","views/DataGraph/components/WordSummary.js","views/DataGraph/components/GraphTutorial/components/TutorialSlide.js","views/DataGraph/components/GraphTutorial/index.js","views/DataGraph/components/FindWordData.js","views/DataGraph/index.js","App.js","reducers/dashboardGraphReducer.js","reducers/dashboardGraphFilterReducer.js","reducers/index.js","serviceWorker.js","index.js"],"names":["NotFound","props","ForceNodeUpdate","render","sigma","nodes","edges","nodes_sigma","graph","map","n","id","edges_sigma","e","edges_stored","nodes_stored","_","difference","length","filter","includes","edgeToRemove","forEach","edge","dropEdge","nodeToRemove","node","dropNode","nodeToAdd","addNode","edgeToAdd","addEdge","React","Component","Chart","componentDidMount","data","setState","loadingState","x","y","gradientId","type","Math","floor","random","_onMouseEnter","yAxis","xAxis","VGridLine","HGridLine","size","opacity","visibleSummary","_onNearestX","debounce","value","index","state","crosshairValues","_onMouseLeave","this","height","color1","color2","colorProps","color","commonSeriesProps","animation","curve","Dimmer","as","Segment","active","Loader","style","display","textAlign","justifyContent","alignItems","Statistic","inverted","zIndex","position","textShadow","Value","Label","xType","category","onMouseLeave","onMouseEnter","transition","transform","x1","x2","y1","y2","offset","stopColor","stopOpacity","title","tickLabelAngle","line","stroke","ticks","text","fill","fontWeight","mark","strokeWidth","ErrorBlock","error","Grid","Row","columns","centered","Column","width","placeholder","Header","icon","Icon","name","Subheader","href","SingleStatistic","marginTop","label","handleBuildTable","word","i","Table","key","Cell","score","definition","overflow","celled","padded","HeaderCell","singleLine","Body","Definition","handleBuildDefinitionCard","Feed","Event","Content","Summary","Divider","Card","backgroundColor","boxShadow","handleBuildComponent","component","visible","SingleStat","List","ComponentWrapper","handleToggleChartVisibility","handleComponentIcon","handlePrettifyTitle","toUpperCase","slice","replace","iconName","iconColor","textalign","cursor","onClick","padding","scrollbarColor","children","GallerySlide","centerVisible","animationDirection","Transition","duration","basic","card","GalleryButtons","currentPage","maxPage","Button","Group","functionality","disabled","ComponentGallery","currentSlide","currentButton","delay","Promise","resolve","setTimeout","handleChangeCurrentSlide","a","async","GalleryButton","DeleteModal","handleOpen","modalOpen","handleClose","Modal","open","onClose","trigger","content","Actions","handleDelete","newNode","payload","removeNode","addGraphFilter","newFilter","clearGraphFilter","clearedFilter","NodeSummary","handleDeleteNode","incomingNode","edgesToRemove","dashboardGraph","displayedGraph","source","nodesToRemove","target","closeModal","treeLayout","dashboardComponents","left","top","right","party","horizontal","margin","mapDispatchToProps","connect","TutorialSlide","pageNumber","styling","segmentStyling","Radio","slider","checked","handleBuildTutorialSlide","GraphTurorial","handleShowTutorial","tutorialVisible","marginRight","marginLeft","animated","hidden","maxHeight","FindWordData","handleChangeFilter","handleAbstractChangeFilter","filterValue","currentParty","handleChangeLayoutDirection","direction","changeLayoutDirection","currentDirection","handleGraphLayoutChange","prevState","handleShowOptionsForm","formVisible","handleUniqueIdentifier","c","r","toString","handleAddRhymesNodes","rhymes","dataPushArray","push","defs","syllables","numSylables","reverse","handleAddAssociatedNodes","associated","handleAddAntonymsNodes","antonyms","handleAddSynonymsNodes","synonyms","handleQueryWord","term","find","initGraph","fetch","then","res","json","result","sliderValue","done","handleChange","handleSubmit","queryString","searchQuery","maxResult","settings","start","min","max","step","onChange","Form","divided","translate","widths","Input","fluid","positive","discrete","Field","newLayout","toggleLabelVisibility","labelVisibility","SigmaComponent","handleClickNode","summaryVisible","nodeInfo","handleCloseNodeSummary","document","body","dashboardGraphFilter","findWordData","newNodeDataInheritance","hoverX","hoverY","addNodeVisible","hoveredNodePossibleChildren","layout","WordSummary","renderer","onClickNode","drawEdges","edgeColor","drawEdgeLabels","defaultEdgeLabelColor","minNodeSize","maxNodeSize","minEdgeSize","maxEdgeSize","clone","verbose","defaultNodeColor","borderSize","defaultNodeBorderColor","defaultLabelColor","defaultLabelSize","defaultEdgeType","labelThreshold","font","link","default","directed","compound","easing","rankDir","nodesep","edgesep","ranksep","background","iterationsPerRender","scalingRatio","scaleNodes","linLogMode","timeout","worker","slowDown","GraphTutorial","nodesBy","updateNode","updatedNodes","App","className","Helmet","BrowserRouter","Container","Switch","Route","path","DataGraph","status","initialState","labelView","combineReducers","action","some","child","Boolean","window","location","hostname","match","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.10ec93cc.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Icon } from 'semantic-ui-react';\r\n\r\n// Converted to a functional component without state.\r\n\r\nconst NotFound = (props) => {\r\n\r\n    return (\r\n\r\n        <h1>\r\n            Placeholder - THIS PAGE DOES NOT EXIST\r\n        </h1>\r\n    )\r\n}\r\nexport default NotFound;","import React from 'react';\r\nimport _ from 'lodash';\r\n\r\nclass ForceNodeUpdate extends React.Component {\r\n\r\n    // This checks the currently displayed nodes/edges (which are from sigma.graph), and compares them with the Redux store (when the store is updated). If there is a discrepency, the sigma graph is updated using its built-in addNode, addEdge, dropNode, and dropEdge functions, while also updating the Redux store with our own actions.\r\n    componentWillReceiveProps({ sigma, nodes, edges }) {\r\n\r\n        const nodes_sigma = sigma.graph.nodes().map(n => n.id) || []\r\n        const edges_sigma = sigma.graph.edges().map(e => e.id) || []\r\n        const edges_stored = edges.map(e => e.id) || []\r\n        const nodes_stored = nodes.map(n => n.id) || []\r\n\r\n        if (_.difference(edges_stored, edges_sigma).length > 0 || _.difference(nodes_stored, nodes_sigma).length > 0 || _.difference(edges_sigma, edges_stored).length > 0 || _.difference(nodes_sigma, nodes_stored).length > 0) {\r\n\r\n            // NOTE: This is called FIRST purposefully. I drop the edges first, as I need to update their removed status in our store. Sigma automatically deletes Edges when a node is removed, and so I just forcefully remove them first here instead. That way, our store will contain the updated status of what is displayed. \r\n            if (edges_sigma.filter(n => !edges_stored.includes(n)).length > 0) {\r\n                // REMOVE EDGE\r\n                const edgeToRemove = edges_sigma.filter(n => !edges_stored.includes(n))\r\n                if (edgeToRemove && edgeToRemove.length > 0) {\r\n                    edgeToRemove.forEach(edge => sigma.graph.dropEdge(edge))\r\n                }\r\n\r\n            }\r\n\r\n            if (nodes_sigma.filter(n => !nodes_stored.includes(n)).length > 0) {\r\n                // REMOVE NODE\r\n                const nodeToRemove = nodes_sigma.filter(n => !nodes_stored.includes(n))\r\n                if (nodeToRemove && nodeToRemove.length > 0) {\r\n                    nodeToRemove.forEach(node => sigma.graph.dropNode(node))\r\n                }\r\n\r\n            } else if (nodes_stored.filter(n => !nodes_sigma.includes(n)).length > 0) {\r\n                //  ADD NODE\r\n                const nodeToAdd = nodes.filter(n => !nodes_sigma.includes(n.id))\r\n                if (nodeToAdd && nodeToAdd.length > 0) {\r\n                    nodeToAdd.forEach(node => sigma.graph.addNode(node))\r\n                }\r\n            }\r\n\r\n            if (edges_stored.filter(n => !edges_sigma.includes(n)).length > 0) {\r\n                //  ADD EDGE\r\n                const edgeToAdd = edges.filter(n => !edges_sigma.includes(n.id))\r\n                if (edgeToAdd && edgeToAdd.length > 0) {\r\n                    edgeToAdd.forEach(edge => sigma.graph.addEdge(edge))\r\n                }\r\n            }\r\n        }\r\n    }\r\n    render = () => null\r\n}\r\n\r\nexport default ForceNodeUpdate;","import React from 'react'\r\nimport {\r\n    FlexibleXYPlot,\r\n    LineSeries,\r\n    VerticalGridLines,\r\n    HorizontalGridLines,\r\n    YAxis,\r\n    XAxis,\r\n    VerticalBarSeries,\r\n    MarkSeries,\r\n    LineMarkSeries,\r\n    Crosshair,\r\n    AreaSeries,\r\n    GradientDefs\r\n} from 'react-vis'\r\nimport PropTypes from 'prop-types';\r\nimport { Statistic, Dimmer, Loader, Segment } from 'semantic-ui-react';\r\n\r\nimport { debounce } from 'lodash';\r\n\r\n\r\n// NOTE: All data must be accepted as an object type with X and Y definitions for the data.\r\n\r\nclass Chart extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            loadingState: true,\r\n            crosshairValues: [],\r\n            yAxis: false,\r\n            xAxis: false,\r\n            VGridLine: false,\r\n            HGridLine: false,\r\n            size: 'scale(1.2)  translate(0px, 20px)',\r\n            visibleSummary: true,\r\n            opacity: .5,\r\n            data: []\r\n\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        // Calls the data from provided apiUrl\r\n        this.props.data ? this.setState({ data: this.props.data, loadingState: true }, () => this.setState({ loadingState: false })) :\r\n            this.setState({ data: [{ x: 0, y: 0 }], loadingState: false })\r\n\r\n        this.setState({ loadingState: false, gradientId: this.props.type + Math.floor(Math.random() * 1000) })\r\n    }\r\n\r\n    // Shows in depth graph information\r\n    _onMouseEnter = () => {\r\n        this.setState({\r\n            yAxis: true,\r\n            xAxis: true,\r\n            VGridLine: true,\r\n            HGridLine: true,\r\n            size: 'scale(1) translate(0px, 0px)',\r\n            opacity: 1,\r\n            visibleSummary: false\r\n        })\r\n    }\r\n\r\n    // Shows information per column in graph.\r\n    _onNearestX = debounce((value, { index }) => {\r\n\r\n        if (this.state.VGridLine) {\r\n            this.setState({ crosshairValues: [{ x: this.state.data[index].x, y: this.state.data[index].y }] })\r\n        }\r\n\r\n    }, 1);\r\n\r\n\r\n    _onMouseLeave = () => {\r\n\r\n        this.setState({\r\n            crosshairValues: [],\r\n            yAxis: false,\r\n            xAxis: false,\r\n            VGridLine: false,\r\n            HGridLine: false,\r\n            size: 'scale(1.2)  translate(0px, 20px)',\r\n            opacity: .5,\r\n            visibleSummary: true\r\n        });\r\n    };\r\n\r\n\r\n    render() {\r\n\r\n        const { type, height, color1, color2 } = this.props;\r\n        const { yAxis, xAxis, VGridLine, HGridLine, gradientId, size, visibleSummary, opacity, loadingState, data } = this.state;\r\n        const colorProps = {\r\n            color: `url(#${gradientId})`,\r\n        }\r\n        const commonSeriesProps = {\r\n            color: `url(#${gradientId})`,\r\n            // onNearestX: this._onNearestX,\r\n            animation: true,\r\n            data: data,\r\n            curve: 'curveMonotoneX'\r\n        }\r\n\r\n\r\n        return (\r\n            !loadingState ?\r\n                <div style={{ display: 'flex', textAlign: 'center', justifyContent: 'center', alignItems: 'center' }}>\r\n                    {visibleSummary && !loadingState ?\r\n                        <Statistic size='small' inverted style={{ zIndex: 1, position: 'absolute', textShadow: '5px 5px 5px #1c1c1c' }}>\r\n                            <Statistic.Value>{typeof data[data.length - 1].y === 'number' ? Math.floor(data[data.length - 1].y) : data[data.length - 1].y}</Statistic.Value>\r\n                            <Statistic.Label>{data[data.length - 1].x}</Statistic.Label>\r\n                        </Statistic>\r\n                        : null}\r\n\r\n                    {data[0].x === 'No Data Available' ? <div style={{ height: 250 }}></div> :\r\n                        <FlexibleXYPlot\r\n                            xType=\"ordinal\"\r\n                            category height={height || 300}\r\n                            onMouseLeave={this._onMouseLeave}\r\n                            onMouseEnter={this._onMouseEnter}\r\n                            style={{ transition: 'transform 100ms', transform: size, opacity: opacity }}\r\n                            {...colorProps}\r\n\r\n                        >\r\n\r\n\r\n                            {color1 && color2 ? <GradientDefs>\r\n                                <linearGradient id={gradientId} x1=\"0\" x2=\"0\" y1=\"1\" y2=\"0\">\r\n                                    <stop offset=\"0%\" stopColor={color1} stopOpacity={0.8} />\r\n                                    <stop offset=\"100%\" stopColor={color2} stopOpacity={0.8} />\r\n                                </linearGradient>\r\n                            </GradientDefs>\r\n\r\n                                : null}\r\n\r\n\r\n                            {VGridLine ?\r\n                                <VerticalGridLines style={{\r\n                                    opacity: '.5',\r\n\r\n                                }} />\r\n                                : null\r\n                            }\r\n                            {HGridLine ?\r\n                                <HorizontalGridLines style={{\r\n                                    opacity: '.5',\r\n\r\n                                }} />\r\n                                : null\r\n                            }\r\n                            {xAxis ?\r\n                                <XAxis title=\"Word\"\r\n                                    position=\"middle\"\r\n                                    tickLabelAngle={-30}\r\n                                    style={{\r\n                                        line: { stroke: '#303030' },\r\n                                        ticks: { stroke: '#303030' },\r\n                                        text: { stroke: 'none', fill: '#ffffff', fontWeight: 600 },\r\n                                        title: { stroke: 'none', fill: '#ffffff', fontWeight: 600 }\r\n                                    }} /> :\r\n                                null}\r\n\r\n                            {yAxis ?\r\n                                <YAxis\r\n                                    title=\"Word Ranking\"\r\n                                    tickLabelAngle={-30}\r\n                                    position=\"middle\"\r\n                                    style={{\r\n                                        line: { stroke: '#303030' },\r\n                                        ticks: { stroke: '#303030' },\r\n                                        text: { stroke: 'none', fill: '#ffffff', fontWeight: 600 },\r\n                                        title: { stroke: 'none', fill: '#ffffff', fontWeight: 600 }\r\n                                    }} /> :\r\n                                null}\r\n                            {\r\n                                type === 'bar' ?\r\n                                    <VerticalBarSeries\r\n                                        {...commonSeriesProps}\r\n                                    /> :\r\n                                    type === 'mark' ?\r\n                                        <MarkSeries\r\n                                            style={{ mark: { strokeWidth: 2 } }}\r\n                                            {...commonSeriesProps}\r\n                                        /> :\r\n                                        type === 'line'\r\n                                            ? <LineSeries\r\n                                                style={{ strokeWidth: 4 }}\r\n\r\n                                                {...colorProps}\r\n                                                {...commonSeriesProps}\r\n                                            /> :\r\n                                            type === 'linemark' ?\r\n                                                <LineMarkSeries\r\n                                                    style={{ mark: { strokeWidth: 2 }, line: { strokeWidth: 8 } }}\r\n\r\n                                                    {...colorProps}\r\n                                                    {...commonSeriesProps}\r\n                                                /> :\r\n                                                type === 'area' ?\r\n                                                    <AreaSeries\r\n                                                        {...colorProps}\r\n                                                        {...commonSeriesProps}\r\n\r\n                                                        opacity={.8}\r\n\r\n                                                    /> :\r\n                                                    null\r\n                            }\r\n                            {/* <Crosshair\r\n                                values={this.state.crosshairValues}\r\n                                className='test'>\r\n                                <div style={{ background: 'black' }}>\r\n                                    <h3>Values of crosshair:</h3>\r\n                                    <p>Series 1: {this.state.crosshairValues.length > 0 ? this.state.crosshairValues[0].x : null}</p>\r\n                                    <p>Series 2: {this.state.crosshairValues.length > 0 ? this.state.crosshairValues[0].y : null}</p>\r\n                                </div>\r\n                            </Crosshair> */}\r\n                        </FlexibleXYPlot>\r\n                    }\r\n                </div> :\r\n                <div>\r\n                    <Dimmer as={Segment} active={loadingState}>\r\n                        <Loader>Loading</Loader>\r\n                    </Dimmer>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nChart.propTypes = {\r\n    type: PropTypes.string,\r\n    width: PropTypes.number,\r\n    height: PropTypes.number,\r\n    yAxis: PropTypes.bool,\r\n    xAxis: PropTypes.bool,\r\n    VGridLine: PropTypes.bool,\r\n    HGridLine: PropTypes.bool,\r\n    color: PropTypes.string,\r\n\r\n}\r\n\r\nexport default Chart;","import React, { Fragment } from 'react'\r\nimport { Segment, Icon, Header, Grid } from 'semantic-ui-react'\r\n\r\nclass ErrorBlock extends React.Component {\r\n    render() {\r\n        const { error } = this.props;\r\n        if (error) {\r\n            return (<Grid.Row columns={1} centered>\r\n                <Grid.Column textAlign='center' width={6}>\r\n                    <Segment placeholder>\r\n                        <Header as='h1' icon>\r\n                            <Icon name='exclamation' />\r\n                            Error\r\n                            <Header.Subheader>\r\n                                {error}\r\n                            </Header.Subheader>\r\n                        </Header>\r\n                    </Segment>\r\n                    <div style={{ textAlign: 'center' }}>\r\n                        please contact <a\r\n                            href='mailto:erik.t.irgens'>@gmail.com</a> if this\r\n                    issue persists\r\n                    </div>\r\n                </Grid.Column>\r\n            </Grid.Row>)\r\n        } else {\r\n            return <Fragment />\r\n        }\r\n    }\r\n}\r\n\r\nexport default ErrorBlock","import React, { Component } from 'react'\r\n\r\nimport PropTypes from 'prop-types';\r\nimport { Statistic, Loader, Dimmer } from 'semantic-ui-react';\r\n\r\n\r\nclass SingleStatistic extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            data: [],\r\n            loadingState: true,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ loadingState: false, data: this.props.data })\r\n\r\n    }\r\n\r\n    render() {\r\n        const { color } = this.props;\r\n        const { data, loadingState } = this.state;\r\n        return (\r\n            <>\r\n                {!loadingState ?\r\n\r\n                    <Statistic inverted size='huge' color={color} style={{ height: '100%', marginTop: '5em' }}>\r\n                        <Statistic.Value>{data.value}</Statistic.Value>\r\n                        <Statistic.Label>{data.label}</Statistic.Label>\r\n                    </Statistic> :\r\n                    <Dimmer active>\r\n                        <Loader>Loading</Loader>\r\n                    </Dimmer>\r\n                }\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nSingleStatistic.propTypes = {\r\n    type: PropTypes.string,\r\n    apiUrl: PropTypes.string\r\n}\r\n\r\nexport default SingleStatistic;","import React, { Component } from 'react'\r\n\r\nimport PropTypes from 'prop-types';\r\nimport { Statistic, Loader, Dimmer, Table } from 'semantic-ui-react';\r\n\r\n\r\nclass SingleStatistic extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            data: [],\r\n            loadingState: true,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ loadingState: false, data: this.props.data })\r\n\r\n    }\r\n\r\n    handleBuildTable = (data) => {\r\n        return data.map((word, i) => (\r\n            < Table.Row key={i} >\r\n                <Table.Cell>{word.word}</Table.Cell>\r\n                <Table.Cell>{word.score}</Table.Cell>\r\n                {word.definition ? <Table.Cell>{word.definition}</Table.Cell> : <Table.Cell>\"No definition available\"}</Table.Cell>}\r\n\r\n            </Table.Row >\r\n        ))\r\n    }\r\n\r\n    render() {\r\n        const { color } = this.props;\r\n        const { data, loadingState } = this.state;\r\n        return (\r\n            <>\r\n                {!loadingState ?\r\n                    <div style={{ overflow: 'auto', height: '100%' }}>\r\n                        <Table inverted celled padded color={color} style={{ overflow: 'auto' }}>\r\n                            <Table.Header>\r\n                                <Table.Row>\r\n                                    <Table.HeaderCell singleLine>\r\n                                        Word\r\n                                </Table.HeaderCell>\r\n                                    <Table.HeaderCell>\r\n                                        Rating\r\n                                </Table.HeaderCell>\r\n                                    <Table.HeaderCell>\r\n                                        Definition\r\n                                </Table.HeaderCell>\r\n                                </Table.Row>\r\n                            </Table.Header>\r\n\r\n                            <Table.Body>\r\n                                {this.handleBuildTable(data)}\r\n                            </Table.Body>\r\n\r\n                        </Table></div> :\r\n                    <Dimmer active>\r\n                        <Loader>Loading</Loader>\r\n                    </Dimmer>\r\n\r\n                }\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nSingleStatistic.propTypes = {\r\n    type: PropTypes.string,\r\n    apiUrl: PropTypes.string\r\n}\r\n\r\nexport default SingleStatistic;","import React, { Component } from 'react'\r\n\r\nimport PropTypes from 'prop-types';\r\nimport { Header, Loader, Dimmer, Divider, Feed, Card } from 'semantic-ui-react';\r\n\r\n\r\nclass Definition extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            data: [],\r\n            loadingState: true,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ loadingState: false, data: this.props.data })\r\n\r\n    }\r\n\r\n    handleBuildDefinitionCard = (data) => {\r\n        return data.map((definition, i) => (\r\n            <>\r\n                <Feed.Event key={i}>\r\n                    <Feed.Label><Header inverted color={this.props.color}>{i + 1}</Header></Feed.Label>\r\n                    <Feed.Content>\r\n                        <Feed.Summary style={{ color: \"white\" }}>\r\n                            {definition}\r\n                        </Feed.Summary>\r\n                    </Feed.Content>\r\n                </Feed.Event>\r\n                <Divider inverted></Divider></>\r\n        ))\r\n    }\r\n\r\n    render() {\r\n        const { color } = this.props;\r\n        const { data, loadingState } = this.state;\r\n        return (\r\n            <>\r\n                {!loadingState ?\r\n                    <div style={{ overflow: 'auto', height: '100%' }}>\r\n                        <Card color={this.props.color} style={{ backgroundColor: \"#242424\", width: \"100%\", boxShadow: \"2px 2px 2px \" + this.props.color }} >\r\n                            <Card.Content>\r\n                                <Card.Header style={{ color: \"white\" }}>{data.word}</Card.Header>\r\n                            </Card.Content>\r\n                            <Card.Content>\r\n                                <Feed inverted>\r\n                                    {this.handleBuildDefinitionCard(data.definition)}\r\n                                </Feed>\r\n                            </Card.Content>\r\n                        </Card>\r\n                    </div> :\r\n                    <Dimmer active>\r\n                        <Loader>Loading</Loader>\r\n                    </Dimmer>\r\n\r\n                }\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nDefinition.propTypes = {\r\n    type: PropTypes.string,\r\n    apiUrl: PropTypes.string\r\n}\r\n\r\nexport default Definition;\r\n","import React from \"react\";\r\nimport Chart from '../SharedComponents/Chart';\r\nimport ErrorBlock from '../SharedComponents/ErrorBlock'\r\nimport SingleStatistic from '../SharedComponents/SingleStat';\r\nimport List from '../SharedComponents/List';\r\nimport Definition from '../SharedComponents/Definition';\r\n\r\nconst handleBuildComponent = (component) => {\r\n\r\n    switch (component.type) {\r\n        case 'line':\r\n        case 'mark':\r\n        case 'bar':\r\n        case 'area':\r\n        case 'linemark': {\r\n            return (\r\n                <Chart\r\n\r\n                    type={component.type}\r\n                    data={component.data}\r\n                    yAxis={component.yAxis || true}\r\n                    xAxis={component.xAxis || true}\r\n                    VGridLine={component.VGridLine || true}\r\n                    HGridLine={component.HGridLine || true}\r\n                    color={component.color}\r\n                    color1={component.color1}\r\n                    color2={component.color2}\r\n                    visible='true' />\r\n            )\r\n        }\r\n        case 'single-stat': {\r\n            return (<SingleStatistic\r\n\r\n                color={component.color}\r\n                data={component.data} />);\r\n        }\r\n        case 'list': {\r\n            return (<List\r\n\r\n                color={component.color}\r\n                data={component.data} />);\r\n        }\r\n        case 'definition': {\r\n            return (<Definition\r\n\r\n                color={component.color}\r\n                data={component.data} />);\r\n        }\r\n        default: {\r\n            let error = `The component type of \"${component.type}\" is invalid.`\r\n            return (<ErrorBlock inverted error={error} />);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default handleBuildComponent;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Icon } from 'semantic-ui-react';\r\n\r\n// NOTE: This component is intended to wrap other components, giving them either a style or a size (such as a card, or grouped in a grid)\r\n\r\nclass ComponentWrapper extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            visible: true,\r\n\r\n        }\r\n    }\r\n\r\n    // Hides/Shows the component it is wrapping\r\n    handleToggleChartVisibility = () => {\r\n        this.state.visible ? this.setState({ visible: false }) : this.setState({ visible: true });\r\n    }\r\n    // Dictates what the icon should be through type\r\n    handleComponentIcon = () => {\r\n        const { type } = this.props;\r\n        switch (type) {\r\n            case 'linemark':\r\n            case 'line': {\r\n                return 'chart line';\r\n            }\r\n            case 'mark': {\r\n                return 'circle';\r\n            }\r\n            case 'area': {\r\n                return 'area graph'\r\n            }\r\n            case 'bar': {\r\n                return 'chart bar';\r\n            }\r\n\r\n            case 'single-stat': {\r\n                return 'info';\r\n            }\r\n\r\n            case 'list': {\r\n                return 'numbered list'\r\n            }\r\n            case 'definition': {\r\n                return 'book'\r\n            }\r\n            default: {\r\n                // If unrecognized, return an X error icon.\r\n                return 'x';\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    handlePrettifyTitle = () => (this.props.title[0].toUpperCase() + this.props.title.slice(1)).replace(/-/g, \" \")\r\n\r\n    render() {\r\n        const { visible } = this.state;\r\n\r\n        let iconName = visible ? 'triangle down' : 'triangle right';\r\n        let iconColor = this.handleComponentIcon() === 'x' ? '#e8323e' : '#08b1e0';\r\n        let overflow = this.props.type === 'news-feed' || this.props.type === 'grid-list' ? 'auto' : 'hidden';\r\n\r\n        return (\r\n            <>\r\n                <div style={{ backgroundColor: '#242424', textAlign: 'center' }} textalign='center'>\r\n                    <div style={{ cursor: 'pointer', backgroundColor: '#242424', textAlign: 'left' }} onClick={this.handleToggleChartVisibility}>\r\n                        <div style={{ padding: '1em' }}>\r\n                            <h5 style={{ color: 'white' }}>\r\n                                <Icon style={{ color: 'white' }} name={iconName}>\r\n                                </Icon>\r\n                                <Icon style={{ color: iconColor }} name={this.handleComponentIcon()}>\r\n                                </Icon>\r\n                                {this.handlePrettifyTitle()}\r\n                            </h5>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    {visible ? <div style={{\r\n                        // marginTop: 30\r\n                        // ,\r\n                        height: 300, overflow: overflow, scrollbarColor: 'red', backgroundColor: '#242424', textAlign: 'center'\r\n                    }}> {this.props.children} </div> : null}\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nComponentWrapper.propTypes = {\r\n    card: PropTypes.bool,\r\n    type: PropTypes.string,\r\n}\r\n\r\nexport default ComponentWrapper;","import React from 'react';\r\nimport handleBuildComponent from \"../../../../../utilities/buildDashboardComponents\";\r\nimport ComponentWrapper from \"../../../../../SharedComponents/ComponentWrapper\";\r\nimport { Transition, Segment } from \"semantic-ui-react\"\r\n\r\nconst GallerySlide = (props) => {\r\n\r\n    const { component, centerVisible, animationDirection } = props;\r\n    const duration = 200\r\n    return (\r\n\r\n        <Transition visible={centerVisible} animation={animationDirection} duration={duration}>\r\n            <Segment basic>\r\n                <ComponentWrapper type={component.type} title={component.name} card>\r\n                    {handleBuildComponent(component)}\r\n                </ComponentWrapper >\r\n            </Segment>\r\n        </Transition>\r\n    )\r\n}\r\nexport default GallerySlide;","import React from 'react';\r\nimport { Button, Icon } from 'semantic-ui-react'\r\n\r\nconst GalleryButtons = (props) => {\r\n    return (\r\n        <div>\r\n            <p>Page {props.currentPage + 1} of {props.maxPage + 1}</p>\r\n            <Button.Group icon>\r\n                {props.currentPage > 0 ? <Button onClick={() => props.functionality(\"decrement\")}>\r\n                    <Icon name='arrow left' />\r\n                </Button> :\r\n                    <Button disabled>\r\n                        <Icon name='arrow left' />\r\n                    </Button>}\r\n                {props.currentPage != props.maxPage ? <Button onClick={() => props.functionality(\"increment\")}>\r\n                    <Icon name='arrow right' />\r\n                </Button> :\r\n                    <Button disabled>\r\n                        <Icon name='arrow right' />\r\n                    </Button>}\r\n            </Button.Group>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GalleryButtons;","import React from 'react';\r\nimport GallerySlide from './components/GallerySlide';\r\nimport GalleryButtons from './components/GalleryButton';\r\n\r\nclass ComponentGallery extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            currentSlide: 0,\r\n            currentButton: 0,\r\n            centerVisible: true,\r\n            animationDirection: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.setState({ currentSlide: 0, currentButton: 0 })\r\n    }\r\n\r\n    delay = (duration) => new Promise(resolve => setTimeout(resolve, duration));\r\n\r\n\r\n    handleChangeCurrentSlide = async (value) => {\r\n        // Hide current slide\r\n        if (value === 'increment') {\r\n            this.setState({\r\n                animationDirection: 'slide right',\r\n                centerVisible: false,\r\n            })\r\n        } else if (value === 'decrement') {\r\n            this.setState({\r\n                animationDirection: 'slide left',\r\n                centerVisible: false,\r\n            })\r\n        }\r\n\r\n        // Wait for animation to complete\r\n        await this.delay(200)\r\n\r\n        // Render next/prev slide\r\n        if (value === 'increment' && this.state.currentSlide < this.props.data.length - 1) {\r\n            this.setState({\r\n                animationDirection: \"slide left\",\r\n                currentSlide: (this.state.currentSlide + 1),\r\n                centerVisible: true,\r\n            })\r\n        } else if (value === 'decrement' && this.state.currentSlide > 0) {\r\n            this.setState({\r\n                animationDirection: \"slide right\",\r\n                currentSlide: (this.state.currentSlide - 1),\r\n                centerVisible: true,\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { data } = this.props\r\n        const { currentSlide, centerVisible, animationDirection } = this.state\r\n        return (\r\n            <div style={{ overflow: 'hidden', width: '100%' }} >\r\n                {data ?\r\n                    <>\r\n                        <GallerySlide\r\n\r\n                            centerVisible={centerVisible}\r\n                            animationDirection={animationDirection}\r\n                            component={data[currentSlide]} />\r\n                        <GalleryButtons\r\n                            maxPage={data.length - 1 || 0}\r\n                            currentPage={currentSlide}\r\n                            functionality={this.handleChangeCurrentSlide}>\r\n                        </GalleryButtons>\r\n                    </>\r\n                    :\r\n                    <>\r\n                    </>\r\n                }\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default ComponentGallery;","import React from 'react'\r\nimport { Button, Header, Icon, Modal } from \"semantic-ui-react\";\r\n\r\n\r\nclass DeleteModal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { modalOpen: false }\r\n    }\r\n\r\n    handleOpen = () => this.setState({ modalOpen: true })\r\n\r\n    handleClose = () => this.setState({ modalOpen: false })\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Modal\r\n                open={this.state.modalOpen}\r\n                onClose={this.handleClose}\r\n                trigger={<Button onClick={this.handleOpen} basic color='red'>\r\n                    <Icon name='delete' />\r\n                    Delete\r\n                </Button>} basic size='small'>\r\n                <Header icon='archive' content={this.props.title} />\r\n                <Modal.Content>\r\n                    <p>\r\n                        This action cannot be reversed. Are you sure you want to delete this?\r\n                    </p>\r\n                    {this.props.type === \"node\" ?\r\n                        <p>\r\n                            Note: If the node you are deleting has children (other nodes connected to it further down in the tree), they will also be deleted.\r\n                        </p> :\r\n                        null\r\n                    }\r\n\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button onClick={this.handleClose} basic inverted>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button color='red' inverted onClick={() => {\r\n                        this.props.handleDelete()\r\n                        this.handleClose()\r\n                    }}>\r\n                        <Icon name='trash' /> Yes\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DeleteModal","import {\r\n    ADD_NODE, REMOVE_NODE, UPDATE_NODE,\r\n    ADD_GRAPH_FILTER, CLEAR_GRAPH_FILTER, CHANGE_LAYOUT_DIRECTION, TOGGLE_LABEL_VISIBILITY, INIT_GRAPH\r\n} from './types';\r\n\r\n// DASHBOARD GRAPH ALTERATION\r\n\r\nexport const addNode = (newNode) => ({\r\n    type: ADD_NODE,\r\n    payload: { newNode }\r\n})\r\n\r\nexport const initGraph = (newNode) => ({\r\n    type: INIT_GRAPH,\r\n    payload: { newNode }\r\n})\r\n\r\nexport const removeNode = (nodeToRemove) => ({\r\n    type: REMOVE_NODE,\r\n    payload: { nodeToRemove }\r\n})\r\n\r\nexport const updateNode = (updatedNodes) => ({\r\n    type: UPDATE_NODE,\r\n    payload: { updatedNodes }\r\n})\r\n\r\n// DASHBOARD GRAPH FILTERS\r\n\r\nexport const addGraphFilter = (newFilter) => ({\r\n    type: ADD_GRAPH_FILTER,\r\n    payload: { newFilter }\r\n})\r\n\r\nexport const clearGraphFilter = (clearedFilter) => ({\r\n    type: CLEAR_GRAPH_FILTER,\r\n    payload: { clearedFilter }\r\n})\r\n\r\nexport const changeLayoutDirection = (newLayout) => ({\r\n    type: CHANGE_LAYOUT_DIRECTION,\r\n    payload: { newLayout }\r\n})\r\n\r\nexport const toggleLabelVisibility = (labelVisibility) => ({\r\n    type: TOGGLE_LABEL_VISIBILITY,\r\n    payload: { labelVisibility }\r\n})","export const INIT_GRAPH = 'init_graph'\r\nexport const ADD_NODE = 'add_node'\r\nexport const REMOVE_NODE = 'remove_node'\r\nexport const UPDATE_NODE = 'update_node'\r\nexport const ADD_GRAPH_FILTER = 'add_graph_filter'\r\nexport const CLEAR_GRAPH_FILTER = 'clear_graph_filter'\r\nexport const CHANGE_LAYOUT_DIRECTION = 'change_layout_direction'\r\nexport const TOGGLE_LABEL_VISIBILITY = 'toggle_label_visibility'","import React from 'react';\r\nimport { Divider, Icon, Segment } from 'semantic-ui-react';\r\nimport ComponentGallery from \"./ComponentGallery/index\";\r\nimport DeleteModal from \"../../../SharedComponents/deleteModal\";\r\nimport { addNode, removeNode } from \"../../../actions/index\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\n// When clicking a node, the NodeSummary is a modal with pertinent information described to the selected node.\r\nclass NodeSummary extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            visible: this.props.visible,\r\n            loadingState: true,\r\n            data: \"\",\r\n            dashboardComponents: []\r\n        }\r\n    }\r\n\r\n    // This function also deletes child nodes and edges.\r\n    handleDeleteNode = (incomingNode) => {\r\n        const edgesToRemove = this.props.dashboardGraph.displayedGraph.edges.filter(edge => edge.source === incomingNode.id)\r\n        let nodesToRemove = []\r\n        edgesToRemove.forEach(edge => nodesToRemove = [...nodesToRemove, ...this.props.dashboardGraph.displayedGraph.nodes.filter(node => node.id === edge.target)])\r\n        this.props.removeNode(incomingNode)\r\n        if (nodesToRemove.length > 0) {\r\n            nodesToRemove.forEach(node => this.handleDeleteNode(node))\r\n        }\r\n        this.props.closeModal()\r\n    }\r\n\r\n    componentDidMount = () => {\r\n\r\n        this.setState(\r\n            {\r\n                visible: this.props.visible,\r\n                data: this.props.data,\r\n                treeLayout: this.props.treeLayout\r\n            }\r\n        )\r\n    }\r\n\r\n    render() {\r\n\r\n        const { data, treeLayout } = this.state;\r\n        return (\r\n            < Segment inverted style={{\r\n                position: \"fixed\",\r\n                zIndex: 2,\r\n                left: \"50%\",\r\n                top: \"50%\",\r\n                transform: \"translate(-50%, -50%)\"\r\n            }}\r\n            >\r\n                <div\r\n                    id=\"nodeSummary\"\r\n                    style={{ width: '60vw', textAlign: 'center' }}\r\n                >\r\n                    <Icon name=\"x\" style={{ cursor: \"pointer\", right: 10, top: 10, position: 'absolute' }} onClick={this.props.closeModal} />\r\n                    {data.party ?\r\n                        <h3>{data.label} - Party {data.party}</h3>\r\n                        : <h3>{data.label}</h3>\r\n                    }\r\n\r\n                    <Divider horizontal />\r\n                    <ComponentGallery data={this.props.dashboardComponents}></ComponentGallery>\r\n                    {data.id != 'customer' && treeLayout ?\r\n                        <>\r\n                            <Divider />\r\n                            <DeleteModal\r\n                                style={{ margin: '20px' }}\r\n                                type=\"node\" title={\"Delete \" + data.label + \"?\"}\r\n                                handleDelete={() => this.handleDeleteNode(data)}\r\n                            />\r\n                        </> :\r\n                        null}\r\n                </div>\r\n            </Segment>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps({ dashboardGraph }) {\r\n    return { dashboardGraph };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    addNode, removeNode\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NodeSummary);","import React from 'react';\r\nimport { Transition, Segment, Icon, Button, Form, Radio } from \"semantic-ui-react\"\r\n\r\n\r\nconst handleBuildTutorialSlide = (pageNumber) => {\r\n    let styling = { width: '500px', color: 'white', textAlign: 'center' }\r\n    let segmentStyling = { height: '370px', textAlign: 'left', backgroundColor: '#242424', color: 'white' }\r\n    switch (pageNumber) {\r\n        case 0:\r\n            return (\r\n                <div style={styling} >\r\n                    <h3>Overview</h3>\r\n\r\n                    <Segment style={segmentStyling}>\r\n                        <p>This graph is representative of all the words associated with what you searched.</p>\r\n                        <p>There are four main data sources available.</p>\r\n                        <ul>\r\n                            <li>Synonyms</li>\r\n                            <li>Antonyms</li>\r\n                            <li>Associated</li>\r\n                            <li>Rhymes</li>\r\n                        </ul>\r\n\r\n                        <p>Synonyms are words that are similar in definition</p>\r\n                        <p>Antonyms are words that are opposite in definition</p>\r\n                        <p>Assoicated words are related to the searched term statistically in the same piece of text. ( cow => milking )</p>\r\n                        <p>Rhymes are words that share ending consonant and vowel pairs, and also share pronunciation.</p>\r\n                    </Segment>\r\n                </div>\r\n            )\r\n            break;\r\n        case 1:\r\n            return (\r\n                <div style={styling} >\r\n                    <h3>Adding Nodes</h3>\r\n                    <Segment style={segmentStyling}>\r\n                        <p>First, search for a term in the Search Term section of the header. Type in a single word, then either hit enter, or click 'Search'.</p>\r\n\r\n                        <p>A new modal will appear, labeled 'Add Nodes'. Below are available words in respective categories. Clicking the <Icon style={{ cursor: 'pointer', color: 'green' }} name=\"plus\"></Icon> icon will add that category's words into the graph below.</p>\r\n\r\n                        <p>You may adjust the number of results that you will receive using the 'Result Limit' slider adjascent to the 'Search Term' column.</p>\r\n                        <p><em>Be careful when setting your result limits. The higher your limit, the more densely populated the graph can become - making it more difficult to read. </em></p>\r\n                    </Segment>\r\n                </div>\r\n            )\r\n            break;\r\n        case 2:\r\n            return (\r\n                <div style={styling} >\r\n                    <h3>Viewing the Graph</h3>\r\n                    <Segment style={segmentStyling}>\r\n                        <p>What you see are nodes (points) connected by edges (lines). Each node represents data, and has metrics associated with them.</p>\r\n\r\n                        <p>Zooming in further will allows for you to see the names of each node </p>\r\n\r\n                        <p>Each node can be inspected further by hovering over it, and then clicking on it. This will bring up a summary modal that displays more information - such as definition, populatiry, part of speech, pronunciation, and syllable count.</p>\r\n                    </Segment>\r\n                </div>\r\n            )\r\n            break;\r\n        case 3:\r\n            return (\r\n                <div style={styling} >\r\n                    <h3>Removing Nodes</h3>\r\n                    <Segment style={segmentStyling}>\r\n                        <p>You can delete a node if the current layout is set to Tree layout display.</p>\r\n\r\n                        <p>While viewing a node's summary, you can see there is a <Button color=\"red\" inverted size='mini'><Icon name='x'></Icon> Delete</Button> at the bottom.</p>\r\n\r\n                        <p>Clicking this button will prompt you to confirm the deletion of the currently selected node.</p>\r\n\r\n                        <p><b>Deleting a node will also delete any children (nodes that are connected to this node), their children, and so on.<em> Be careful when deleting a node.</em></b></p>\r\n                    </Segment>\r\n                </div>\r\n            )\r\n            break;\r\n        case 4:\r\n            return (\r\n                <div style={styling} >\r\n                    <h3>Further Options</h3>\r\n                    <Segment style={segmentStyling}>\r\n                        <p>In the right-most column, there is a 'Layout' section. Within this column, you can change the layout of the displayed graph from a gravitationally computed graph (known as Force Atlas layout) to a tree layout (known as a Dagre layout). </p>\r\n\r\n                        <p>Clicking this slider will toggle between each of these layouts: </p>\r\n\r\n                        <div style={{\r\n                            position: \"relative\",\r\n                            left: \"50%\",\r\n                            transform: \"translate(-50%)\",\r\n                        }}>\r\n                            <label style={{ color: 'white' }}>Switch Layout</label>\r\n                            <Icon name=\"fork\"></Icon>\r\n                            <Radio\r\n                                slider\r\n                                name='editModeToggle'\r\n                                checked={false}\r\n                            />\r\n                            <Icon name=\"tree\"></Icon>\r\n                        </div>\r\n\r\n                        <p> While the graph is in the Tree Layout, you have access to these buttons:</p> <Button.Group style={{\r\n                            position: \"relative\",\r\n                            left: \"50%\",\r\n                            transform: \"translate(-50%)\",\r\n                        }}>\r\n                            <Button size='mini' inverted icon='arrow down' />\r\n                            <Button size='mini' inverted icon='arrow up' />\r\n                            <Button size='mini' inverted icon='arrow right' />\r\n                            <Button size='mini' inverted icon='arrow left' />\r\n                        </Button.Group> <p> These buttons allow you to alter the direction of the Tree graph's orientation for your pleasure. </p>\r\n                    </Segment>\r\n                </div >\r\n            )\r\n            break;\r\n        default:\r\n\r\n    }\r\n}\r\n\r\nconst TutorialSlide = (props) => {\r\n\r\n    const { centerVisible, animationDirection, currentPage } = props;\r\n    const duration = 200\r\n    return (\r\n\r\n        <Transition visible={centerVisible} animation={animationDirection} duration={duration}>\r\n            <Segment basic>\r\n                {handleBuildTutorialSlide(currentPage)}\r\n            </Segment>\r\n        </Transition>\r\n    )\r\n}\r\nexport default TutorialSlide;","import React from 'react';\r\nimport { Segment, Icon, Button, Form, Transition, Radio, Divider } from 'semantic-ui-react';\r\nimport TutorialSlide from \"./components/TutorialSlide\";\r\nimport GalleryButtons from \"../ComponentGallery/components/GalleryButton\";\r\n\r\n\r\nclass GraphTurorial extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            currentSlide: 0,\r\n            tutorialVisible: false,\r\n\r\n        }\r\n    }\r\n\r\n    // Shows the options form itself\r\n    handleShowTutorial = () => {\r\n        this.setState({ tutorialVisible: !this.state.tutorialVisible })\r\n    }\r\n\r\n    delay = (duration) => new Promise(resolve => setTimeout(resolve, duration));\r\n\r\n    handleChangeCurrentSlide = async (value) => {\r\n        // Hide current slide\r\n        if (value === 'increment') {\r\n            this.setState({\r\n                animationDirection: 'slide right',\r\n                centerVisible: false,\r\n            })\r\n        } else if (value === 'decrement') {\r\n            this.setState({\r\n                animationDirection: 'slide left',\r\n                centerVisible: false,\r\n            })\r\n        }\r\n\r\n        // This will ensure that the animation has time to render before setting the state to display the next slide.\r\n        await this.delay(200)\r\n\r\n        // Render next/prev slide\r\n        if (value === 'increment' && this.state.currentSlide < 7) {\r\n            this.setState({\r\n                animationDirection: \"slide left\",\r\n                currentSlide: (this.state.currentSlide + 1),\r\n                centerVisible: true,\r\n            })\r\n        } else if (value === 'decrement' && this.state.currentSlide > 0) {\r\n            this.setState({\r\n                animationDirection: \"slide right\",\r\n                currentSlide: (this.state.currentSlide - 1),\r\n                centerVisible: true,\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { tutorialVisible, currentSlide, animationDirection, centerVisible } = this.state\r\n        return (\r\n\r\n            <div\r\n                style={{\r\n                    // position: 'absolute',\r\n                    // right: \"5%\",\r\n                    // top: '130px',\r\n                    opacity: 1,\r\n                    textAlign: 'center',\r\n                    marginTop: \"10px\",\r\n                    marginRight: '13vw',\r\n                    marginLeft: '87vw',\r\n                }}\r\n            >\r\n                <Button\r\n                    color=\"grey\"\r\n                    inverted\r\n                    size='mini'\r\n                    animated='vertical'\r\n                    // circular\r\n                    style={{\r\n                        textAlign: 'center'\r\n                    }}\r\n                    onClick={this.handleShowTutorial}>\r\n                    <Button.Content hidden>Tutorial</Button.Content>\r\n                    <Button.Content visible>\r\n                        <Icon\r\n                            name='help'>\r\n                        </Icon>\r\n                    </Button.Content>\r\n                </Button>\r\n                <Transition visible={tutorialVisible} animation=\"fade left\" duration=\"300\">\r\n                    <Segment style={{\r\n                        position: 'fixed',\r\n                        right: '10vw',\r\n                        top: '320px',\r\n                        textAlign: 'center',\r\n                        maxHeight: '70vh',\r\n                        overflow: 'auto',\r\n                        opacity: .9\r\n                    }} inverted>\r\n\r\n                        <TutorialSlide\r\n                            centerVisible={centerVisible}\r\n                            animationDirection={animationDirection}\r\n                            currentPage={currentSlide}\r\n                        />\r\n\r\n\r\n                        <Divider></Divider>\r\n                        <GalleryButtons\r\n                            maxPage={4}\r\n                            currentPage={currentSlide}\r\n                            functionality={this.handleChangeCurrentSlide}></GalleryButtons>\r\n                    </Segment>\r\n                </Transition>\r\n\r\n\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default GraphTurorial;","import React from 'react';\r\nimport { Segment, Icon, Button, Form, Transition, Radio, Grid } from 'semantic-ui-react';\r\nimport { Slider } from \"react-semantic-ui-range\";\r\nimport { addNode, initGraph, removeNode, addGraphFilter, clearGraphFilter, changeLayoutDirection, toggleLabelVisibility } from \"../../../actions/index\";\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\nclass FindWordData extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            visible: this.props.visible,\r\n            loadingState: true,\r\n            data: [],\r\n            searchQuery: '',\r\n            formVisible: false,\r\n            sliderValue: 15,\r\n            maxResult: 5,\r\n            settings: {\r\n                start: 20,\r\n                min: 1,\r\n                max: 100,\r\n                step: 1,\r\n                onChange: value => {\r\n                    this.setState({ sliderValue: value })\r\n                },\r\n            },\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // Called by above, uses Redux to change current filter\r\n    handleChangeFilter = (filter) => {\r\n        switch (filter) {\r\n            case 1:\r\n                this.props.addGraphFilter({\r\n                    filter: {\r\n                        party: 1,\r\n                        id: 'firstparty'\r\n                    }\r\n                })\r\n                break;\r\n            case 2:\r\n                this.props.addGraphFilter({\r\n                    filter: {\r\n                        party: 2,\r\n                        id: 'secondparty'\r\n                    }\r\n                })\r\n                break;\r\n            case 3:\r\n                this.props.addGraphFilter({\r\n                    filter: {\r\n                        party: 3,\r\n                        id: 'thirdparty'\r\n                    }\r\n                })\r\n                break;\r\n            default:\r\n                this.props.clearGraphFilter({\r\n                    filter: {\r\n                        party: null,\r\n                        id: null\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    // Used when clearing filters\r\n    handleAbstractChangeFilter = (value) => {\r\n        this.setState({ filterValue: 0, currentParty: \"No Filter\" })\r\n        this.handleChangeFilter(value)\r\n    }\r\n\r\n    handleChangeLayoutDirection = (direction) => {\r\n        // From index, sets index's state of direction to be what Dagre wants for layout\r\n        this.props.changeLayoutDirection(direction)\r\n        switch (direction) {\r\n            case 'TB':\r\n                this.setState({\r\n                    currentDirection: 'Top to Bottom'\r\n                })\r\n                break;\r\n            case 'BT':\r\n                this.setState({\r\n                    currentDirection: 'Bottom to Top'\r\n                })\r\n                break;\r\n            case 'LR':\r\n                this.setState({\r\n                    currentDirection: 'Left to Right'\r\n                })\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    currentDirection: 'Right to Left'\r\n                })\r\n        }\r\n\r\n        if (this.state.filterValue > 0) {\r\n            this.handleChangeFilter(this.state.filterValue)\r\n        } else {\r\n            this.handleAbstractChangeFilter(0)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // Enables edit mode here and in index.\r\n    handleGraphLayoutChange = () => {\r\n        this.props.handleGraphLayoutChange()\r\n        this.setState((prevState) => ({ treeLayout: !prevState.treeLayout }))\r\n    }\r\n\r\n    delay = (duration) => new Promise(resolve => setTimeout(resolve, duration));\r\n\r\n    handleShowOptionsForm = () => {\r\n        this.setState({ formVisible: !this.state.formVisible })\r\n    }\r\n\r\n    // Create a unique ID, used for nodeId and edgeTarget (the same item)\r\n    handleUniqueIdentifier = () => {\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n            return v.toString(16);\r\n        });\r\n    }\r\n\r\n\r\n\r\n    handleAddRhymesNodes = () => {\r\n        let rhymes = {\r\n            node: {\r\n                id: \"rhymes\",\r\n                label: \"Rhymes\",\r\n                size: 20,\r\n                color: \"#66ffcc\",\r\n                type: 'diamond',\r\n                x: 0,\r\n                y: 0,\r\n                dashboardComponents: [{\r\n                    type: 'area',\r\n                    name: 'Word Scores',\r\n                    size: 8,\r\n                    data: [],\r\n                    color1: '#66ffcc',\r\n                    color2: '#18f5ab',\r\n                    yAxis: true,\r\n                    xAxis: true,\r\n                    VGridLine: true,\r\n                    HGridLine: true,\r\n                },\r\n                {\r\n                    type: 'single-stat',\r\n                    name: 'Word Count',\r\n                    size: 8,\r\n                    data: { value: 0, label: \"Word(s)\" },\r\n                    color: 'teal',\r\n\r\n                },\r\n                {\r\n                    type: 'list',\r\n                    name: 'Word List',\r\n                    size: 8,\r\n                    data: [],\r\n                    color: 'teal',\r\n\r\n                },]\r\n            },\r\n            edge: {\r\n                id: \"rhymes\",\r\n                source: 'main-node',\r\n                target: 'rhymes',\r\n                type: 'parallel',\r\n                color: \"#66ffcc\",\r\n            }\r\n        }\r\n        this.props.addNode(rhymes)\r\n\r\n        if (this.state.rhymes && this.state.rhymes.length > 0) {\r\n            let dataPushArray = []\r\n            this.state.rhymes.forEach((word) => {\r\n                dataPushArray.push({ x: word.word, y: word.score ? word.score : 0 })\r\n                rhymes.node.dashboardComponents[1].data.value += 1\r\n                rhymes.node.dashboardComponents[2].data.push({ word: word.word, score: word.score ? word.score : 0, definition: word.defs ? word.defs[0] : \"No definition available\" })\r\n                this.props.addNode({\r\n                    node: {\r\n                        id: word.word,\r\n                        label: word.word,\r\n                        type: 'circle',\r\n                        size: word.score && word.score / 1000 < 10 ? word.score / 1000 : 9,\r\n                        color: \"#66ffcc\",\r\n                        x: 0,\r\n                        y: 0,\r\n                        score: word.score ? word.score : 0,\r\n                        syllables: word.numSylables,\r\n                        dashboardComponents: [{\r\n                            type: 'definition',\r\n                            name: 'Definition',\r\n                            size: 8,\r\n                            data: { word: word.word, definition: word.defs ? word.defs : [\"No definition available\"] },\r\n                            color: 'teal',\r\n\r\n                        },\r\n                        {\r\n                            type: 'single-stat',\r\n                            name: 'Word Score',\r\n                            size: 8,\r\n                            data: { value: word.score, label: \"Score\" },\r\n                            color: 'teal',\r\n\r\n                        },\r\n                        ]\r\n                    },\r\n                    edge: {\r\n                        id: word.word + 'edge' + 'rhymes',\r\n                        source: 'rhymes',\r\n                        color: \"#66ffcc\",\r\n                        target: word.word\r\n                    }\r\n                });\r\n            })\r\n            rhymes.node.dashboardComponents[0].data = [...dataPushArray.reverse()]\r\n        }\r\n\r\n    }\r\n\r\n    handleAddAssociatedNodes = () => {\r\n\r\n        let associated = {\r\n            node: {\r\n                id: \"associated\",\r\n                label: \"Associated\",\r\n                size: 20,\r\n                color: \"#ffcc66\",\r\n                type: 'diamond',\r\n                x: 0,\r\n                y: 0,\r\n                dashboardComponents: [{\r\n                    type: 'area',\r\n                    name: 'Word Scores',\r\n                    size: 8,\r\n                    data: [],\r\n                    color1: '#ffcc66',\r\n                    color2: '#ffbe3b',\r\n                    yAxis: true,\r\n                    xAxis: true,\r\n                    VGridLine: true,\r\n                    HGridLine: true,\r\n                }, {\r\n                    type: 'single-stat',\r\n                    name: 'Word Count',\r\n                    size: 8,\r\n                    data: { value: 0, label: \"Word(s)\" },\r\n                    color: 'yellow',\r\n                    yAxis: true,\r\n                    xAxis: true,\r\n                    VGridLine: true,\r\n                    HGridLine: true,\r\n                },\r\n                {\r\n                    type: 'list',\r\n                    name: 'Word List',\r\n                    size: 8,\r\n                    data: [],\r\n                    color: 'yellow',\r\n\r\n                },]\r\n            },\r\n            edge: {\r\n                id: \"associated\",\r\n                source: 'main-node',\r\n                target: 'associated',\r\n                type: 'parallel',\r\n                color: \"#ffcc66\",\r\n            }\r\n        }\r\n\r\n        this.props.addNode(associated)\r\n\r\n        if (this.state.associated && this.state.associated.length > 0) {\r\n            let dataPushArray = []\r\n            this.state.associated.forEach((word) => {\r\n                dataPushArray.push({ x: word.word, y: word.score })\r\n                associated.node.dashboardComponents[1].data.value += 1\r\n                associated.node.dashboardComponents[2].data.push({ word: word.word, score: word.score, definition: word.defs ? word.defs[0] : \"No definition available\" })\r\n\r\n                this.props.addNode({\r\n                    node: {\r\n                        id: word.word,\r\n                        label: word.word,\r\n                        type: 'circle',\r\n                        size: word.score / 1000 < 10 ? word.score / 1000 : 9,\r\n                        color: \"#ffcc66\",\r\n                        x: 0,\r\n                        y: 0,\r\n                        score: word.score,\r\n                        syllables: word.numSylables,\r\n                        dashboardComponents: [{\r\n                            type: 'definition',\r\n                            name: 'Definition',\r\n                            size: 8,\r\n                            data: { word: word.word, definition: word.defs ? word.defs : [\"No definition available\"] },\r\n                            color: 'yellow',\r\n\r\n                        },\r\n                        {\r\n                            type: 'single-stat',\r\n                            name: 'Word Score',\r\n                            size: 8,\r\n                            data: { value: word.score, label: \"Score\" },\r\n                            color: 'yellow',\r\n\r\n                        },\r\n                        ]\r\n                    },\r\n                    edge: {\r\n                        id: word.word + 'edge' + 'associated',\r\n                        source: 'associated',\r\n                        target: word.word,\r\n                        color: \"#ffcc66\",\r\n\r\n                    }\r\n                });\r\n            })\r\n            associated.node.dashboardComponents[0].data = [...dataPushArray.reverse()]\r\n        }\r\n    }\r\n\r\n    handleAddAntonymsNodes = () => {\r\n\r\n        let antonyms = {\r\n            node: {\r\n                id: \"antonyms\",\r\n                label: \"Antonyms\",\r\n                size: 20,\r\n                color: \"#ff6666\",\r\n                type: 'diamond',\r\n                x: 0,\r\n                y: 0,\r\n                dashboardComponents: [{\r\n                    type: 'area',\r\n                    name: 'Word Scores',\r\n                    size: 8,\r\n                    data: [],\r\n                    color1: '#ff6666',\r\n                    color2: '#ff3636',\r\n                    yAxis: true,\r\n                    xAxis: true,\r\n                    VGridLine: true,\r\n                    HGridLine: true,\r\n                }, {\r\n                    type: 'single-stat',\r\n                    name: 'Word Count',\r\n                    size: 8,\r\n                    data: { value: 0, label: \"Word(s)\" },\r\n                    color: 'red',\r\n                    yAxis: true,\r\n                    xAxis: true,\r\n                    VGridLine: true,\r\n                    HGridLine: true,\r\n                },\r\n                {\r\n                    type: 'list',\r\n                    name: 'Word List',\r\n                    size: 8,\r\n                    data: [],\r\n                    color: 'red',\r\n\r\n                },]\r\n            },\r\n            edge: {\r\n                id: \"antonyms\",\r\n                source: 'main-node',\r\n                target: 'antonyms',\r\n                type: 'parallel',\r\n                color: \"#ff6666\",\r\n            }\r\n        }\r\n\r\n        this.props.addNode(antonyms)\r\n\r\n        if (this.state.antonyms && this.state.antonyms.length > 0) {\r\n            let dataPushArray = []\r\n            this.state.antonyms.forEach((word) => {\r\n                dataPushArray.push({ x: word.word, y: word.score })\r\n                antonyms.node.dashboardComponents[1].data.value += 1\r\n                antonyms.node.dashboardComponents[2].data.push({ word: word.word, score: word.score, definition: word.defs ? word.defs[0] : \"No definition available\" })\r\n\r\n                this.props.addNode({\r\n                    node: {\r\n                        id: word.word,\r\n                        label: word.word,\r\n                        type: 'circle',\r\n                        size: word.score / 1000 < 10 ? word.score / 1000 : 9,\r\n                        color: \"#ff6666\",\r\n                        x: 0,\r\n                        y: 0,\r\n                        score: word.score,\r\n                        syllables: word.numSylables,\r\n                        dashboardComponents: [{\r\n                            type: 'definition',\r\n                            name: 'Definition',\r\n                            size: 8,\r\n                            data: { word: word.word, definition: word.defs ? word.defs : [\"No definition available\"] },\r\n                            color: 'red',\r\n\r\n                        },\r\n                        {\r\n                            type: 'single-stat',\r\n                            name: 'Word Score',\r\n                            size: 8,\r\n                            data: { value: word.score, label: \"Score\" },\r\n                            color: 'red',\r\n\r\n                        },\r\n                        ]\r\n                    },\r\n                    edge: {\r\n                        id: word.word + 'edge' + 'antonyms',\r\n                        source: 'antonyms',\r\n                        color: \"#ff6666\",\r\n                        target: word.word\r\n                    }\r\n                });\r\n            })\r\n            antonyms.node.dashboardComponents[0].data = [...dataPushArray.reverse()]\r\n        }\r\n    }\r\n\r\n    handleAddSynonymsNodes = () => {\r\n\r\n        let synonyms = {\r\n            node: {\r\n                id: \"synonyms\",\r\n                label: \"Synonyms\",\r\n                size: 20,\r\n                color: \"#6699ff\",\r\n                type: 'diamond',\r\n                x: 0,\r\n                y: 0,\r\n                dashboardComponents: [{\r\n                    type: 'area',\r\n                    name: 'Word Scores',\r\n                    size: 8,\r\n                    data: [],\r\n                    color1: '#6699ff',\r\n                    color2: '#4d88ff',\r\n                    yAxis: true,\r\n                    xAxis: true,\r\n                    VGridLine: true,\r\n                    HGridLine: true,\r\n                }, {\r\n                    type: 'single-stat',\r\n                    name: 'Word Count',\r\n                    size: 8,\r\n                    data: { value: 0, label: \"Word(s)\" },\r\n                    color: 'blue',\r\n                    yAxis: true,\r\n                    xAxis: true,\r\n                    VGridLine: true,\r\n                    HGridLine: true,\r\n                },\r\n                {\r\n                    type: 'list',\r\n                    name: 'Word List',\r\n                    size: 8,\r\n                    data: [],\r\n                    color: 'blue',\r\n\r\n                },]\r\n            },\r\n            edge: {\r\n                id: \"synonyms\",\r\n                source: 'main-node',\r\n                target: 'synonyms',\r\n                type: 'parallel',\r\n                color: \"#6699ff\",\r\n            }\r\n        }\r\n\r\n        this.props.addNode(synonyms)\r\n\r\n        if (this.state.synonyms && this.state.synonyms.length > 0) {\r\n            let dataPushArray = []\r\n            this.state.synonyms.forEach((word) => {\r\n                dataPushArray.push({ x: word.word, y: word.score })\r\n                synonyms.node.dashboardComponents[1].data.value += 1\r\n                synonyms.node.dashboardComponents[2].data.push({ word: word.word, score: word.score, definition: word.defs ? word.defs[0] : \"No definition available\" })\r\n\r\n                this.props.addNode({\r\n                    node: {\r\n                        id: word.word,\r\n                        label: word.word,\r\n                        type: 'circle',\r\n                        size: word.score / 1000 < 10 ? word.score / 1000 : 9,\r\n                        color: \"#6699ff\",\r\n                        x: 0,\r\n                        y: 0,\r\n                        score: word.score,\r\n                        syllables: word.numSylables,\r\n                        dashboardComponents: [{\r\n                            type: 'definition',\r\n                            name: 'Definition',\r\n                            size: 8,\r\n                            data: { word: word.word, definition: word.defs ? word.defs : [\"No definition available\"] },\r\n                            color: 'blue',\r\n\r\n                        },\r\n                        {\r\n                            type: 'single-stat',\r\n                            name: 'Word Score',\r\n                            size: 8,\r\n                            data: { value: word.score, label: \"Score\" },\r\n                            color: 'blue',\r\n\r\n                        },\r\n                        ]\r\n                    },\r\n                    edge: {\r\n                        id: word.word + 'edge' + 'SYNONYMS',\r\n                        source: 'synonyms',\r\n                        target: word.word\r\n                    }\r\n                });\r\n\r\n            })\r\n            synonyms.node.dashboardComponents[0].data = [...dataPushArray.reverse()]\r\n        }\r\n    }\r\n    handleDeleteNode = (incomingNode) => {\r\n        const edgesToRemove = this.props.dashboardGraph.displayedGraph.edges.filter(edge => edge.source === incomingNode.id)\r\n        let nodesToRemove = []\r\n        edgesToRemove.forEach(edge => nodesToRemove = [...nodesToRemove, ...this.props.dashboardGraph.displayedGraph.nodes.filter(node => node.id === edge.target)])\r\n        this.props.removeNode(incomingNode)\r\n        if (nodesToRemove.length > 0) {\r\n            nodesToRemove.forEach(node => this.handleDeleteNode(node))\r\n        }\r\n\r\n    }\r\n\r\n    handleQueryWord = (term) => {\r\n        if (this.props.dashboardGraph.displayedGraph.nodes.find(node => node.id === \"main-node\")) {\r\n            this.handleDeleteNode(this.props.dashboardGraph.displayedGraph.nodes.find(node => node.id === \"main-node\"))\r\n        }\r\n\r\n        this.props.initGraph({\r\n            node: {\r\n                id: \"main-node\",\r\n                label: term,\r\n                size: 30,\r\n                color: \"#ffffff\",\r\n                type: 'star',\r\n                x: 0,\r\n                y: 0\r\n            },\r\n            edge: {\r\n                id: \"connecting-node\",\r\n                source: \"customer\",\r\n                target: 'main-node',\r\n                type: 'arrow',\r\n                color: '#ffffff'\r\n            }\r\n        })\r\n\r\n\r\n\r\n        fetch(`https://api.datamuse.com/words?rel_syn=` + term + \"&md=dpsrf\")\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                this.setState({ synonyms: result.slice(0, this.state.sliderValue) })\r\n            }\r\n            )\r\n\r\n        fetch(`https://api.datamuse.com/words?rel_ant=` + term + \"&md=dpsrf\")\r\n            .then(res => res.json())\r\n            .then(result =>\r\n                this.setState({ antonyms: result.slice(0, this.state.sliderValue) })\r\n\r\n\r\n            )\r\n\r\n        fetch(`https://api.datamuse.com/words?rel_trg=` + term + \"&md=dpsrf\")\r\n            .then(res => res.json())\r\n            .then(result =>\r\n                this.setState({ associated: result.slice(0, this.state.sliderValue) })\r\n\r\n\r\n            )\r\n        fetch(`https://api.datamuse.com/words?rel_rhy=` + term + \"&md=dpsrf\")\r\n            .then(res => res.json())\r\n            .then(result =>\r\n                this.setState({ rhymes: result.slice(0, this.state.sliderValue) })\r\n\r\n            )\r\n        this.setState({ done: true })\r\n    }\r\n\r\n    // This sets, in state, a name: value, which is generated by all input field types.\r\n    handleChange = (e, { name, value }) => {\r\n        this.setState({ [name]: value })\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        this.handleQueryWord(this.state.queryString)\r\n\r\n        if (!this.state.treeLayout) {\r\n            this.setState({ treeLayout: true })\r\n            this.props.handleGraphLayoutChange()\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { treeLayout, done, rhymes, associated, antonyms, synonyms, settings, sliderValue } = this.state;\r\n        return (\r\n\r\n            <div style={{\r\n\r\n                opacity: .8,\r\n                textAlign: 'center',\r\n                margin: '0 auto',\r\n                marginTop: '10px',\r\n                width: '80vw',\r\n\r\n            }}>\r\n                <Segment inverted >\r\n                    <Form style={{ textAlign: 'center' }} >\r\n                        <Grid columns=\"equal\" divided inverted>\r\n                            <Grid.Row>\r\n                                <Grid.Column >\r\n                                    <h3 style={{ left: '50%', translate: \"transform (-50%, -50%)\" }}>Search Term</h3>\r\n                                    <Form.Group widths=\"equal\" >\r\n\r\n                                        <Form.Input\r\n                                            fluid\r\n                                            name=\"queryString\"\r\n                                            value={this.state.queryString}\r\n                                            onChange={this.handleChange}\r\n                                            placeholder='Search Term...'\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Button onClick={this.handleSubmit} positive content='Search' />\r\n                                </Grid.Column>\r\n\r\n                                <Grid.Column >\r\n                                    <h3 style={{ left: '50%', translate: \"transform (-50%, -50%)\" }}>Result Limit</h3>\r\n                                    <Slider discrete color=\"green\" settings={settings} name=\"sliderValue\" value={sliderValue} onChange={this.handleChange} />\r\n                                    <h3 style={{ color: \"white\" }}>{sliderValue}</h3>\r\n                                    <p>Readbility:\r\n                                        {sliderValue < 30 ?\r\n                                            <p style={{ color: 'green' }}> <b>Good</b></p>\r\n                                            :\r\n                                            sliderValue < 50 ?\r\n                                                <p style={{ color: 'yellow' }}> <b>Fair</b></p>\r\n                                                :\r\n                                                <p style={{ color: 'orange' }}> <b>Difficult</b></p>}\r\n                                    </p>\r\n                                </Grid.Column>\r\n\r\n                                <Grid.Column >\r\n                                    <h3 style={{ left: '50%', translate: \"transform (-50%, -50%)\" }}>Layout</h3>\r\n                                    {!treeLayout ? <Form.Field>Current Layout: <b>Gravitational Graph</b></Form.Field>\r\n                                        : <Form.Field>Current Layout: <b>Tree Graph</b></Form.Field>}\r\n                                    <Grid columns=\"equal\" divided inverted>\r\n                                        <Grid.Row >\r\n                                            <Grid.Column>\r\n\r\n                                                <Form.Field>\r\n                                                    <label style={{ color: 'white' }}>Switch Layout</label>\r\n                                                    <Icon size=\"big\" inverted disabled={treeLayout} name=\"snowflake outline\"></Icon>\r\n                                                    <Radio\r\n                                                        slider\r\n                                                        name='editModeToggle'\r\n                                                        checked={this.state.treeLayout}\r\n                                                        onChange={this.handleGraphLayoutChange}\r\n                                                    />\r\n                                                    <Icon size=\"big\" inverted disabled={!treeLayout} name=\"tree\"></Icon>\r\n                                                </Form.Field>\r\n                                            </Grid.Column>\r\n\r\n                                            <Grid.Column>\r\n                                                <Button.Group style={{ marginTop: '20px' }}>\r\n                                                    <Button inverted icon='arrow down'\r\n                                                        onClick={() => this.handleChangeLayoutDirection('TB')} disabled={!treeLayout} />\r\n                                                    <Button inverted icon='arrow up'\r\n                                                        onClick={() => this.handleChangeLayoutDirection('BT')} disabled={!treeLayout} />\r\n                                                    <Button inverted icon='arrow right'\r\n                                                        onClick={() => this.handleChangeLayoutDirection('LR')} disabled={!treeLayout} />\r\n                                                    <Button inverted icon='arrow left'\r\n                                                        onClick={() => this.handleChangeLayoutDirection('RL')} disabled={!treeLayout} />\r\n                                                </Button.Group>\r\n                                            </Grid.Column>\r\n                                        </Grid.Row>\r\n                                    </Grid>\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                        </Grid>\r\n                    </Form>\r\n                </Segment >\r\n\r\n                {done ?\r\n                    <Segment inverted style={{ margin: \"0 auto\" }}>\r\n                        <h5>Add Nodes</h5>\r\n                        <Grid columns=\"equal\" divided inverted>\r\n                            <Grid.Row >\r\n                                {synonyms && synonyms.length > 0 ?\r\n\r\n                                    <Grid.Column>\r\n                                        <p>Synonyms: {synonyms.length} <Icon style={{ cursor: 'pointer', color: 'green' }} onClick={this.handleAddSynonymsNodes} name=\"plus\"></Icon> </p>\r\n                                    </Grid.Column> : <></>}\r\n                                {antonyms && antonyms.length > 0 ?\r\n                                    <Grid.Column>\r\n                                        <p>Antonyms: {antonyms.length} <Icon style={{ cursor: 'pointer', color: 'green' }} onClick={this.handleAddAntonymsNodes} name=\"plus\"></Icon></p>\r\n                                    </Grid.Column> : <></>}\r\n\r\n                                {associated && associated.length > 0 ?\r\n                                    <Grid.Column>\r\n\r\n                                        <p>Associated: {associated.length} <Icon style={{ cursor: 'pointer', color: 'green' }} onClick={this.handleAddAssociatedNodes} name=\"plus\"></Icon></p>\r\n                                    </Grid.Column> : <></>}\r\n\r\n                                {rhymes && rhymes.length > 0 ?\r\n                                    <Grid.Column>\r\n\r\n                                        <p>Rhymes: {rhymes.length} <Icon style={{ cursor: 'pointer', color: 'green' }} onClick={this.handleAddRhymesNodes} name=\"plus\"></Icon></p>\r\n                                    </Grid.Column> : <></>}\r\n\r\n                            </Grid.Row>\r\n                        </Grid>\r\n                    </Segment>\r\n                    : <></>}\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps({ dashboardGraph }) {\r\n    return { dashboardGraph };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    addNode, initGraph, removeNode, addGraphFilter, clearGraphFilter, changeLayoutDirection, toggleLabelVisibility\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FindWordData);","import React from 'react';\r\nimport { Helmet } from \"react-helmet/es/Helmet\";\r\n\r\nimport { Sigma, NodeShapes, Filter, RandomizeNodePositions, ForceAtlas2 } from 'react-sigma/lib/';\r\nimport Dagre from 'react-sigma/lib/Dagre'\r\n\r\nimport ForceNodeUpdate from \"./components/ForceNodeUpdate\"\r\nimport WordSummary from \"./components/WordSummary\";\r\n// import NodeCreationForm from \"./components/NodeCreationForm\";\r\n\r\nimport GraphTutorial from \"./components/GraphTutorial/index\";\r\nimport FindWordData from \"./components/FindWordData\"\r\n\r\nimport { addNode, removeNode, updateNode, addGraphFilter, clearGraphFilter } from \"../../actions/index\";\r\nimport { connect } from \"react-redux\";\r\nimport { Icon } from 'semantic-ui-react';\r\n\r\nclass SigmaComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            summaryVisible: false,\r\n            nodeInfo: null,\r\n            filter: this.props.dashboardGraphFilter.filter,\r\n            treeLayout: false,\r\n            findWordData: true\r\n        }\r\n    }\r\n\r\n    // Open gallery/summary\r\n    handleClickNode = (e) => {\r\n        this.setState({\r\n            summaryVisible: true, nodeInfo: e.data.node,\r\n            dashboardComponents: e.data.node.dashboardComponents\r\n        })\r\n    }\r\n\r\n    // Close summary (gallery)\r\n    handleCloseNodeSummary = () => {\r\n        this.setState({ summaryVisible: false, nodeInfo: null })\r\n    }\r\n\r\n\r\n    componentDidMount = () => {\r\n        document.body.style.backgroundColor = \"#000\";\r\n    }\r\n\r\n\r\n    handleGraphLayoutChange = () => {\r\n        this.setState({ treeLayout: !this.state.treeLayout })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { summaryVisible, newNodeDataInheritance, formVisible, hoverX, hoverY, addNodeVisible, treeLayout, hoveredNodePossibleChildren, findWordData } = this.state;\r\n        const { displayedGraph } = this.props.dashboardGraph;\r\n        const { filter, layout } = this.props.dashboardGraphFilter\r\n\r\n        return (\r\n            <div>\r\n                <Helmet>\r\n                    <title>Data Graph</title>\r\n                </Helmet>\r\n\r\n                <div id=\"sigma-wrapper\">\r\n                    {summaryVisible && this.state.nodeInfo ?\r\n                        <WordSummary\r\n                            treeLayout={this.state.treeLayout}\r\n                            dashboardComponents={this.state.dashboardComponents}\r\n                            closeModal={this.handleCloseNodeSummary}\r\n                            style={{ marginLeft: 'auto', marginRight: 'auto' }}\r\n                            visible='true'\r\n                            data={this.state.nodeInfo}></WordSummary>\r\n                        :\r\n                        null\r\n                    }\r\n\r\n                    <Sigma\r\n                        renderer=\"canvas\"\r\n                        graph={displayedGraph}\r\n                        onClickNode={this.handleClickNode}\r\n\r\n                        // A list of other settings can be found here: https://github.com/jacomyal/sigma.js/wiki/Settings\r\n                        settings={{\r\n\r\n                            drawEdges: true,\r\n                            edgeColor: \"target\",\r\n                            drawEdgeLabels: true,\r\n                            defaultEdgeLabelColor: \"#d8d8d8\",\r\n                            minNodeSize: 5,\r\n                            maxNodeSize: 30,\r\n                            minEdgeSize: 5,\r\n                            maxEdgeSize: 5,\r\n                            clone: false,\r\n                            verbose: false,\r\n                            defaultNodeColor: \"#ffffff\",\r\n                            borderSize: 2,\r\n                            defaultNodeBorderColor: \"#000\",\r\n                            defaultLabelColor: \"#ffffff\",\r\n                            defaultLabelSize: 15,\r\n                            defaultEdgeType: \"dashed\",\r\n                            labelThreshold: 5,\r\n                            font: \"arial\",\r\n                        }}\r\n                        style={{\r\n                            width: \"100vw\",\r\n                            position: \"absolute\",\r\n                            height: \"100vh\"\r\n                        }}\r\n                    >\r\n                        {findWordData ?\r\n                            <Icon style={{ cursor: \"pointer\", position: 'absolute', top: \"10px\", left: \"100px\" }} onClick={() => this.setState({ findWordData: !findWordData })} size=\"large\" link inverted name=\"low vision\"></Icon>\r\n                            :\r\n                            <Icon style={{ cursor: \"pointer\", position: 'absolute', top: \"10px\", left: \"100px\" }} onClick={() => this.setState({ findWordData: !findWordData })} size=\"large\" link inverted name=\"eye\"></Icon>\r\n                        }\r\n\r\n                        <NodeShapes default=\"diamond\" />\r\n\r\n                        {!treeLayout ?\r\n                            // RandomizeNodepOsitions is necessary for ForceAtlas to function\r\n                            <RandomizeNodePositions>\r\n\r\n                                <ForceAtlas2\r\n                                    background\r\n                                    easing=\"cubicInOut\"\r\n                                    iterationsPerRender={1}\r\n                                    scalingRatio={1}\r\n                                    scaleNodes={4}\r\n                                    linLogMode\r\n                                    timeout={1000}\r\n                                    worker\r\n                                    slowDown={1}\r\n                                />\r\n                            </RandomizeNodePositions>\r\n                            :\r\n                            <Dagre\r\n                                //  Other node distributions: https://github.com/dunnock/react-sigma/blob/master/DOCS.md \r\n                                // Other Dagre documentation can be found here: https://github.com/dunnock/react-sigma/blob/master/src/Dagre.js\r\n                                // Layout documentation: https://github.com/dagrejs/dagre/wiki#configuring-the-layout \r\n                                directed\r\n                                compound\r\n                                easing=\"\"\r\n                                // TB, BT, LR, or RL T=Top, B=Bottom, L=Left, R=Right, but currently set in REDUX store through the Layout settings in the GraphOptions component\r\n                                rankDir={layout}\r\n                                // Alignment for rank nodes. Can be UL, UR, DL, or DR, where U = up, D = down, L = left, and R = right.\r\n                                // align='DL'\r\n\r\n                                // deals with separation of nodes and edges (node is horizontal, rank is vertical)\r\n                                nodesep=\"50\"\r\n                                edgesep=\"50\"\r\n                                ranksep=\"50\"\r\n\r\n                            />\r\n                        }\r\n\r\n                        {findWordData ? <FindWordData handleGraphLayoutChange={this.handleGraphLayoutChange} handleChangeFilter={this.handleChangeFilter}></FindWordData> : <></>}\r\n\r\n\r\n                        <GraphTutorial />\r\n\r\n                        {filter.id ?\r\n                            <Filter\r\n                                nodesBy={(node) => node.party === filter.party || node.id === \"customer\" || node.id === filter.id}\r\n                            /> :\r\n                            <Filter\r\n                                nodesBy={(node) => node.party > 0 || node.id.length > 0 || node.id}\r\n                            />\r\n                        }\r\n\r\n                        <ForceNodeUpdate nodes={displayedGraph.nodes} edges={displayedGraph.edges} />\r\n                        <NodeShapes default=\"circle\" />\r\n                    </Sigma>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps({ dashboardGraph, dashboardGraphFilter }) {\r\n    return { dashboardGraph, dashboardGraphFilter };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    addNode, removeNode, addGraphFilter, clearGraphFilter, updateNode\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SigmaComponent);","\r\nimport React, { Component } from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport { Helmet } from 'react-helmet'\r\nimport { Container } from \"semantic-ui-react\";\r\nimport NotFound from './SharedComponents/NotFound'\r\nimport DataGraph from './views/DataGraph';\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='App'\r\n      >\r\n        <Helmet>\r\n          <title>Word Visualization</title>\r\n        </Helmet>\r\n        <BrowserRouter>\r\n          <div>\r\n\r\n            {/* <Header /> */}\r\n\r\n            <Container fluid style={{ padding: '0 1em' }}>\r\n              <Switch>\r\n                <Route path={'/'} component={DataGraph} />\r\n                <Route path={'/'} status={404} component={NotFound} />\r\n              </Switch>\r\n            </Container>\r\n          </div>\r\n        </BrowserRouter>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App","import { ADD_NODE, INIT_GRAPH, REMOVE_NODE, UPDATE_NODE } from \"../actions/types\";\r\n\r\n\r\n// TODO: Generate these dynamically dependant on real data. \r\nconst dashboardComponents = [\r\n    {\r\n        type: 'linemark',\r\n        name: 'Name of the data',\r\n        size: 20,\r\n        apiUrl: 'db/getCWRedHunterParameterReducer',\r\n        color1: '#8ac44f',\r\n        color2: '#4caa1a',\r\n        yAxis: true,\r\n        xAxis: true,\r\n        VGridLine: true,\r\n        HGridLine: true,\r\n    },\r\n\r\n    {\r\n        type: 'area',\r\n        name: 'Name of the data',\r\n        size: 8,\r\n        apiUrl: 'db/getCWRedHunterReducer',\r\n        color1: '#8ac44f',\r\n        color2: '#4caa1a',\r\n        yAxis: true,\r\n        xAxis: true,\r\n        VGridLine: true,\r\n        HGridLine: true,\r\n    },\r\n    {\r\n        type: 'bar',\r\n        name: 'Name of the data',\r\n        size: 8,\r\n        apiUrl: 'db/getCWRedHunter',\r\n        color1: '#c10f7c',\r\n        color2: '#b43c7c',\r\n        yAxis: true,\r\n        xAxis: true,\r\n        VGridLine: true,\r\n        HGridLine: true,\r\n    },\r\n    {\r\n        type: 'area',\r\n        name: 'S3 Bucket Size',\r\n        size: 8,\r\n        color1: '#f8b000',\r\n        color2: '#e87721',\r\n        apiUrl: 'db/getCWS3BucketSize',\r\n        yAxis: true,\r\n        xAxis: true,\r\n        VGridLine: true,\r\n        HGridLine: true,\r\n\r\n    },\r\n    {\r\n        type: 'line',\r\n        name: 'S3 Bucket Size',\r\n        size: 8,\r\n        color1: '#f8b000',\r\n        color2: '#e87721',\r\n        apiUrl: 'db/getCWS3BucketSize',\r\n        yAxis: true,\r\n        xAxis: true,\r\n        VGridLine: true,\r\n        HGridLine: true,\r\n\r\n    },\r\n    {\r\n        type: 'mark',\r\n        name: 'S3 Bucket Size',\r\n        size: 8,\r\n        color1: '#f8b000',\r\n        color2: '#e87721',\r\n        apiUrl: 'db/getCWS3BucketSize',\r\n        yAxis: true,\r\n        xAxis: true,\r\n        VGridLine: true,\r\n        HGridLine: true,\r\n\r\n    },\r\n    {\r\n        type: 'bar',\r\n        name: 'S3 Bucket Size',\r\n        size: 8,\r\n        color1: '#f8b000',\r\n        color2: '#e87721',\r\n        apiUrl: 'db/getCWS3BucketSize',\r\n        yAxis: true,\r\n        xAxis: true,\r\n        VGridLine: true,\r\n        HGridLine: true,\r\n\r\n    },\r\n\r\n\r\n    {\r\n        type: 'single-stat',\r\n        name: 'Pages Scraped',\r\n        apiUrl: 'db/getPagesScraped',\r\n        size: 8,\r\n        color: 'teal',\r\n        color1: 'blue',\r\n        color2: '',\r\n    },\r\n\r\n    {\r\n        type: 'single-stat',\r\n        name: 'Total Pages Scraped',\r\n        apiUrl: 'db/getPagesScraped',\r\n        size: 8,\r\n\r\n    },\r\n\r\n\r\n\r\n]\r\n\r\n// For demonstration purposes only\r\nfunction getRandomInt(max) {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\n// The below intiialstate should be equal to a util, one that async fetches this list of nodes and edges. \r\n\r\nconst initialState = {\r\n    displayedGraph: {\r\n        \"nodes\": [],\r\n        \"edges\": []\r\n    }\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case INIT_GRAPH: {\r\n            state = {\r\n                ...state,\r\n                displayedGraph: {\r\n                    nodes: [\r\n                        action.payload.newNode.node\r\n                    ],\r\n                    edges: []\r\n                }\r\n            }\r\n            break;\r\n        }\r\n        case ADD_NODE: {\r\n            state = {\r\n                ...state,\r\n                displayedGraph: {\r\n                    nodes: [\r\n                        ...state.displayedGraph.nodes, action.payload.newNode.node\r\n                    ],\r\n                    edges: [\r\n                        ...state.displayedGraph.edges, action.payload.newNode.edge\r\n                    ],\r\n                }\r\n            };\r\n            break;\r\n        }\r\n        case REMOVE_NODE: {\r\n            state = {\r\n                ...state,\r\n                displayedGraph: {\r\n                    nodes: [\r\n                        ...state.displayedGraph.nodes.filter(node => node.id != action.payload.nodeToRemove.id)\r\n                    ],\r\n                    edges: [\r\n                        ...state.displayedGraph.edges.filter(edge => edge.source != action.payload.nodeToRemove.id && edge.target != action.payload.nodeToRemove.id)\r\n                    ],\r\n                }\r\n            };\r\n            break;\r\n        }\r\n        case UPDATE_NODE: {\r\n            state = {\r\n                ...state,\r\n                displayedGraph: {\r\n                    nodes: [\r\n                        ...state.displayedGraph.nodes.filter(node => !action.payload.updatedNodes.some(child => node.id === child.id)),\r\n                        ...action.payload.updatedNodes\r\n                    ],\r\n                }\r\n            };\r\n            break;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n    return state;\r\n}","import {\r\n    ADD_GRAPH_FILTER, CLEAR_GRAPH_FILTER, CHANGE_LAYOUT_DIRECTION, TOGGLE_LABEL_VISIBILITY\r\n} from \"../actions/types\";\r\n\r\n\r\nconst initialState = {\r\n    filter: {\r\n        party: null,\r\n        id: null,\r\n    },\r\n    layout: 'TB',\r\n    labelView: false\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case ADD_GRAPH_FILTER: {\r\n            state = {\r\n                ...state,\r\n                filter: {\r\n                    party: action.payload.newFilter.filter.party,\r\n                    id: action.payload.newFilter.filter.id,\r\n                }\r\n            };\r\n            break;\r\n        }\r\n        case CLEAR_GRAPH_FILTER: {\r\n            state = {\r\n                ...state,\r\n                filter: {\r\n                    party: action.payload.clearedFilter.filter.party,\r\n                    id: action.payload.clearedFilter.filter.id,\r\n                }\r\n            };\r\n            break;\r\n        }\r\n        case CHANGE_LAYOUT_DIRECTION: {\r\n            state = {\r\n                ...state,\r\n                layout: action.payload.newLayout,\r\n            }\r\n            break;\r\n        }\r\n        case TOGGLE_LABEL_VISIBILITY: {\r\n            state = {\r\n                ...state,\r\n                labelView: action.payload.labelVisibility,\r\n            }\r\n            break;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n    return state;\r\n}","import { combineReducers } from 'redux';\r\n\r\nimport dashboardGraphReducer from \"./dashboardGraphReducer\";\r\nimport dashboardGraphFilterReducer from \"./dashboardGraphFilterReducer\"\r\n\r\n\r\nexport default combineReducers({\r\n    dashboardGraph: dashboardGraphReducer,\r\n    dashboardGraphFilter: dashboardGraphFilterReducer\r\n});","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport thunk from 'redux-thunk';\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nimport { Provider } from 'react-redux'\r\nimport { createStore, applyMiddleware, compose } from 'redux'\r\nimport rootReducer from './reducers';\r\n\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}